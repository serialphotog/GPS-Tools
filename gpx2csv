#!/usr/bin/env python3

import argparse
import os
import sys

from Lib.CommandLine import prompt_user_for_yes_or_no
from Lib.CSVTools import process_column_mapping
from Lib.CSVWriter import CSVWriter
from Lib.GPXParser import GPXParser

def _validate_command_line_args(args) -> bool:
    """
    Validates all of the command line arguments.

    :param args: The command line arguments to validate.

    :returns: True if the arguments are valid, else False.
    """
    # Ensure we have all of the required arguments
    if not args.gpx_path:
        print(f'You must supply an input GPX file.')
        return False
    if not args.csv_path:
        print(f'You must supply the output path for the resulting CSV file.')
        return False
    
    # Make sure the input GPX exists
    if not os.path.isfile(args.gpx_path):
        print(f'Could not find the input GPX: {args.gpx_path}')
        return False
    
    # Check if the output file already exists
    if os.path.isfile(args.csv_path):
        overwrite = prompt_user_for_yes_or_no(f'Output CSV {args.csv_path} ' \
                                              'already exists. Overwrite it?',
                                              'no')
        if overwrite:
            print(f'Removing existing file: {args.csv_path}')
            os.remove(args.csv_path)
        else:
            print(f'Output file exists. Aborting.')
            return False

    return True

def main():
    parser = argparse.ArgumentParser(description="A simply utility to convert GPX files to CSV files.")
    parser.add_argument('--input', '-i', dest="gpx_path", help="Path to the input GPX file.")
    parser.add_argument('--output', '-o', dest="csv_path", help="Path to write the resulting CSV file to.")
    parser.add_argument('--format', '-f', dest="column_mapping", help="The column mapping to use in the resulting CSV file.")
    args = parser.parse_args()

    # Validate the command line arguments
    if not _validate_command_line_args(args=args):
        sys.exit()

    # Handle the column mapping format string, if supplied
    if args.column_mapping:
        try:
            column_mapping = process_column_mapping(args.column_mapping)
        except ValueError as e:
            print(e)
            sys.exit()

    # Parse the GPX file
    gpx_parser = GPXParser(gpx_path= args.gpx_path)
    total = gpx_parser.parse()
    print(f'Successfully parsed {total} waypoints.')

    # Generate the output CSV file
    csv_writer = CSVWriter(gps_points= gpx_parser.get_gps_points(),
                           output_path= args.csv_path,
                           column_mapping= args.column_mapping)
    total = csv_writer.generate()
    print(f'Successfully generated CSV file with {total} waypoints.')

if __name__ == '__main__':
    main()